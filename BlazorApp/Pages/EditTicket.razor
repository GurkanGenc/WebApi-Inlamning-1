@page "/editticket"

<div class="container"><h3>Edit Ticket</h3></div>

<EditForm Model="model" OnSubmit="OnSubmit">
    <div class="container" novalidate>
        <div class="mb-3">
            <InputText type="text" class="form-control" id="ticketid" @bind-Value="model.Id" placeholder="Ticket Id" required />
        </div>

        <div class="mb-3">
            <InputText type="text" class="form-control" id="userid" @bind-Value="model.UserId" placeholder="User Id" required />
        </div>

        <div class="mb-3">
            <InputText type="text" class="form-control" id="customername" @bind-Value="model.CustomerName" placeholder="Customer Name" required />
        </div>

        <div class="mb-0">
            <label for="status" class="form-label">Ticket Status</label>
        </div>
        <div class="mb-3">
            <InputSelect @bind-Value="model.Status">
                @foreach (var value in Enum.GetValues(typeof(TicketStatus)))
                {
                    <option>@value.ToString()</option>
                }
            </InputSelect>
        </div>

        <button class="btn btn-primary" type="submit">Edit</button>
    </div>
</EditForm>
@code {
    private EditTicketModel model { get; set; }

    protected override void OnInitialized()
    {
        model = new EditTicketModel();
    }

    private async Task OnSubmit()
    {
        try
        {
            model.Created = DateTime.Now;
            model.Changed = DateTime.Now;
            // Saves a Http Response Message.
            var response = await Http.PutAsJsonAsync<EditTicketModel>($"https://localhost:44397/api/Tickets/{model.Id}", model);

            if (response.IsSuccessStatusCode)
                NavManager.NavigateTo("/tickets");
        }
        catch { }
    }


    public class EditTicketModel
    {
        public string Id { get; set; }

        public string UserId { get; set; }

        public string CustomerName { get; set; }

        public DateTime Created { get; set; }

        public DateTime Changed { get; set; }

        public TicketStatus Status { get; set; }
    }
    public enum TicketStatus
    {
        Not_Started,
        Ongoing,
        Closed
    }
}
